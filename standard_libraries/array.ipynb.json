{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Array\n",
    "An array is a data structure that can hold more than one value at a time. It is a collection of elements, each identified by an index or key. Arrays are commonly used in programming to organize data so that a related set of values can be easily sorted or searched.\n",
    "\n",
    "In Python, arrays can be implemented using the `list` data type or the `array` module. Here is an example of how to create and manipulate an array using a list:\n",
    "\n",
    "```python\n",
    "# Creating an array\n",
    "arr = [1, 2, 3, 4, 5]\n",
    "\n",
    "# Accessing elements\n",
    "print(arr[0])  # Output: 1\n",
    "\n",
    "# Modifying elements\n",
    "arr[1] = 10\n",
    "\n",
    "# Adding elements\n",
    "arr.append(6)\n",
    "\n",
    "# Removing elements\n",
    "arr.remove(3)\n",
    "\n",
    "# Iterating through the array\n",
    "for element in arr:\n",
    "    print(element)\n",
    "```\n",
    "\n",
    "In this example, we create an array, access and modify its elements, add and remove elements, and iterate through the array to print each element.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3]\n"
     ]
    }
   ],
   "source": [
    "arr = [1,2,3]\n",
    "print(arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4]\n"
     ]
    }
   ],
   "source": [
    "arr.append(4)\n",
    "\n",
    "print(arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import array\n",
    "\n",
    "arr = array.array(\"i\", [1,2,3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "array('i', [1, 2, 3])\n"
     ]
    }
   ],
   "source": [
    "print(arr)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Math\n",
    "\n",
    "The `math` module in Python provides access to various mathematical functions and constants. Some of the commonly used functions include `sqrt()` for calculating the square root, `pi` for the value of Ï€, and `e` for the base of the natural logarithm.\n",
    "\n",
    "In this notebook, we have used the `math` module to calculate the square root of 16, and to print the values of `pi` and `e`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'float'>\n",
      "3.141592653589793\n",
      "2.718281828459045\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "from math import e\n",
    "\n",
    "print(type(math.sqrt(16)))\n",
    "\n",
    "print(math.pi)\n",
    "\n",
    "print(e)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Random\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "Banana\n",
      "['Cherry', 'Banana']\n",
      "<class 'module'>\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "print(random.randint(1,2))\n",
    "\n",
    "\n",
    "print(random.choice([\"Apple\", \"Banana\", \"Cherry\"]))\n",
    "\n",
    "print(random.choices([\"Apple\", \"Banana\", \"Cherry\"], k=2))\n",
    "\n",
    "print(type(random))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# OS module\n",
    "\n",
    "The `os` module in Python provides a way of using operating system-dependent functionality like reading or writing to the file system. It allows you to interface with the underlying operating system that Python is running on.\n",
    "\n",
    "Here is an example of how to use the `os` module to get the current working directory and list the files in it:\n",
    "\n",
    "```python\n",
    "import os\n",
    "\n",
    "# Get the current working directory\n",
    "cwd = os.getcwd()\n",
    "print(\"Current Working Directory:\", cwd)\n",
    "\n",
    "# List all files and directories in the current directory\n",
    "files = os.listdir(cwd)\n",
    "print(\"Files and Directories in '\", cwd, \"' :\")\n",
    "print(files)\n",
    "```\n",
    "\n",
    "In this example, we use the `os.getcwd()` function to get the current working directory and the `os.listdir()` function to list all files and directories in that directory."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/shaswatraj/Desktop/generative-ai/standard_libraries\n",
      "CLD_CONTINUED\n",
      "CLD_DUMPED\n",
      "CLD_EXITED\n",
      "CLD_KILLED\n",
      "CLD_STOPPED\n",
      "CLD_TRAPPED\n",
      "DirEntry\n",
      "EX_CANTCREAT\n",
      "EX_CONFIG\n",
      "EX_DATAERR\n",
      "EX_IOERR\n",
      "EX_NOHOST\n",
      "EX_NOINPUT\n",
      "EX_NOPERM\n",
      "EX_NOUSER\n",
      "EX_OK\n",
      "EX_OSERR\n",
      "EX_OSFILE\n",
      "EX_PROTOCOL\n",
      "EX_SOFTWARE\n",
      "EX_TEMPFAIL\n",
      "EX_UNAVAILABLE\n",
      "EX_USAGE\n",
      "F_LOCK\n",
      "F_OK\n",
      "F_TEST\n",
      "F_TLOCK\n",
      "F_ULOCK\n",
      "GenericAlias\n",
      "Mapping\n",
      "MutableMapping\n",
      "NGROUPS_MAX\n",
      "O_ACCMODE\n",
      "O_APPEND\n",
      "O_ASYNC\n",
      "O_CLOEXEC\n",
      "O_CREAT\n",
      "O_DIRECTORY\n",
      "O_DSYNC\n",
      "O_EVTONLY\n",
      "O_EXCL\n",
      "O_EXEC\n",
      "O_EXLOCK\n",
      "O_FSYNC\n",
      "O_NDELAY\n",
      "O_NOCTTY\n",
      "O_NOFOLLOW\n",
      "O_NOFOLLOW_ANY\n",
      "O_NONBLOCK\n",
      "O_RDONLY\n",
      "O_RDWR\n",
      "O_SEARCH\n",
      "O_SHLOCK\n",
      "O_SYMLINK\n",
      "O_SYNC\n",
      "O_TRUNC\n",
      "O_WRONLY\n",
      "POSIX_SPAWN_CLOSE\n",
      "POSIX_SPAWN_DUP2\n",
      "POSIX_SPAWN_OPEN\n",
      "PRIO_DARWIN_BG\n",
      "PRIO_DARWIN_NONUI\n",
      "PRIO_DARWIN_PROCESS\n",
      "PRIO_DARWIN_THREAD\n",
      "PRIO_PGRP\n",
      "PRIO_PROCESS\n",
      "PRIO_USER\n",
      "P_ALL\n",
      "P_NOWAIT\n",
      "P_NOWAITO\n",
      "P_PGID\n",
      "P_PID\n",
      "P_WAIT\n",
      "PathLike\n",
      "RTLD_GLOBAL\n",
      "RTLD_LAZY\n",
      "RTLD_LOCAL\n",
      "RTLD_NODELETE\n",
      "RTLD_NOLOAD\n",
      "RTLD_NOW\n",
      "R_OK\n",
      "SCHED_FIFO\n",
      "SCHED_OTHER\n",
      "SCHED_RR\n",
      "SEEK_CUR\n",
      "SEEK_DATA\n",
      "SEEK_END\n",
      "SEEK_HOLE\n",
      "SEEK_SET\n",
      "ST_NOSUID\n",
      "ST_RDONLY\n",
      "TMP_MAX\n",
      "WCONTINUED\n",
      "WCOREDUMP\n",
      "WEXITED\n",
      "WEXITSTATUS\n",
      "WIFCONTINUED\n",
      "WIFEXITED\n",
      "WIFSIGNALED\n",
      "WIFSTOPPED\n",
      "WNOHANG\n",
      "WNOWAIT\n",
      "WSTOPPED\n",
      "WSTOPSIG\n",
      "WTERMSIG\n",
      "WUNTRACED\n",
      "W_OK\n",
      "X_OK\n",
      "_Environ\n",
      "__all__\n",
      "__builtins__\n",
      "__doc__\n",
      "__file__\n",
      "__loader__\n",
      "__name__\n",
      "__package__\n",
      "__spec__\n",
      "_check_methods\n",
      "_execvpe\n",
      "_exists\n",
      "_exit\n",
      "_fspath\n",
      "_fwalk\n",
      "_fwalk_close\n",
      "_fwalk_walk\n",
      "_fwalk_yield\n",
      "_get_exports_list\n",
      "_spawnvef\n",
      "_walk_symlinks_as_files\n",
      "_wrap_close\n",
      "abc\n",
      "abort\n",
      "access\n",
      "altsep\n",
      "chdir\n",
      "chflags\n",
      "chmod\n",
      "chown\n",
      "chroot\n",
      "close\n",
      "closerange\n",
      "confstr\n",
      "confstr_names\n",
      "cpu_count\n",
      "ctermid\n",
      "curdir\n",
      "defpath\n",
      "device_encoding\n",
      "devnull\n",
      "dup\n",
      "dup2\n",
      "environ\n",
      "environb\n",
      "error\n",
      "execl\n",
      "execle\n",
      "execlp\n",
      "execlpe\n",
      "execv\n",
      "execve\n",
      "execvp\n",
      "execvpe\n",
      "extsep\n",
      "fchdir\n",
      "fchmod\n",
      "fchown\n",
      "fdopen\n",
      "fork\n",
      "forkpty\n",
      "fpathconf\n",
      "fsdecode\n",
      "fsencode\n",
      "fspath\n",
      "fstat\n",
      "fstatvfs\n",
      "fsync\n",
      "ftruncate\n",
      "fwalk\n",
      "get_blocking\n",
      "get_exec_path\n",
      "get_inheritable\n",
      "get_terminal_size\n",
      "getcwd\n",
      "getcwdb\n",
      "getegid\n",
      "getenv\n",
      "getenvb\n",
      "geteuid\n",
      "getgid\n",
      "getgrouplist\n",
      "getgroups\n",
      "getloadavg\n",
      "getlogin\n",
      "getpgid\n",
      "getpgrp\n",
      "getpid\n",
      "getppid\n",
      "getpriority\n",
      "getsid\n",
      "getuid\n",
      "grantpt\n",
      "initgroups\n",
      "isatty\n",
      "kill\n",
      "killpg\n",
      "lchflags\n",
      "lchmod\n",
      "lchown\n",
      "linesep\n",
      "link\n",
      "listdir\n",
      "lockf\n",
      "login_tty\n",
      "lseek\n",
      "lstat\n",
      "major\n",
      "makedev\n",
      "makedirs\n",
      "minor\n",
      "mkdir\n",
      "mkfifo\n",
      "mknod\n",
      "name\n",
      "nice\n",
      "open\n",
      "openpty\n",
      "original_execl\n",
      "original_execle\n",
      "original_execlp\n",
      "original_execlpe\n",
      "original_execv\n",
      "original_execve\n",
      "original_execvp\n",
      "original_execvpe\n",
      "original_fork\n",
      "original_posix_spawn\n",
      "original_spawnl\n",
      "original_spawnle\n",
      "original_spawnlp\n",
      "original_spawnlpe\n",
      "original_spawnv\n",
      "original_spawnve\n",
      "original_spawnvp\n",
      "original_spawnvpe\n",
      "pardir\n",
      "path\n",
      "pathconf\n",
      "pathconf_names\n",
      "pathsep\n",
      "pipe\n",
      "popen\n",
      "posix_openpt\n",
      "posix_spawn\n",
      "posix_spawnp\n",
      "pread\n",
      "preadv\n",
      "process_cpu_count\n",
      "ptsname\n",
      "putenv\n",
      "pwrite\n",
      "pwritev\n",
      "read\n",
      "readlink\n",
      "readv\n",
      "register_at_fork\n",
      "remove\n",
      "removedirs\n",
      "rename\n",
      "renames\n",
      "replace\n",
      "rmdir\n",
      "scandir\n",
      "sched_get_priority_max\n",
      "sched_get_priority_min\n",
      "sched_yield\n",
      "sendfile\n",
      "sep\n",
      "set_blocking\n",
      "set_inheritable\n",
      "setegid\n",
      "seteuid\n",
      "setgid\n",
      "setgroups\n",
      "setpgid\n",
      "setpgrp\n",
      "setpriority\n",
      "setregid\n",
      "setreuid\n",
      "setsid\n",
      "setuid\n",
      "spawnl\n",
      "spawnle\n",
      "spawnlp\n",
      "spawnlpe\n",
      "spawnv\n",
      "spawnve\n",
      "spawnvp\n",
      "spawnvpe\n",
      "st\n",
      "stat\n",
      "stat_result\n",
      "statvfs\n",
      "statvfs_result\n",
      "strerror\n",
      "supports_bytes_environ\n",
      "supports_dir_fd\n",
      "supports_effective_ids\n",
      "supports_fd\n",
      "supports_follow_symlinks\n",
      "symlink\n",
      "sync\n",
      "sys\n",
      "sysconf\n",
      "sysconf_names\n",
      "system\n",
      "tcgetpgrp\n",
      "tcsetpgrp\n",
      "terminal_size\n",
      "times\n",
      "times_result\n",
      "truncate\n",
      "ttyname\n",
      "umask\n",
      "uname\n",
      "uname_result\n",
      "unlink\n",
      "unlockpt\n",
      "unsetenv\n",
      "urandom\n",
      "utime\n",
      "wait\n",
      "wait3\n",
      "wait4\n",
      "waitid\n",
      "waitid_result\n",
      "waitpid\n",
      "waitstatus_to_exitcode\n",
      "walk\n",
      "write\n",
      "writev\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "\n",
    "print(os.getcwd())\n",
    "\n",
    "# print((os.listdir()))\n",
    "\n",
    "for i in dir(os):\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "\n",
    "# print(os.rmdir(\"new\"))\n",
    "print(os.mkdir(\"new\"))\n",
    "\n",
    "os.chdir(\"new\") # change directory\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/shaswatraj/Desktop/generative-ai/standard_libraries/new\n"
     ]
    }
   ],
   "source": [
    "print(os.getcwd())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "os.chdir(\"..\")\n",
    "os.rmdir(\"new\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# high level operations\n",
    "\n",
    "In this notebook, we have performed various high-level operations such as:\n",
    "\n",
    "- Creating and manipulating arrays using both lists and the `array` module.\n",
    "- Utilizing the `math` module to perform mathematical calculations.\n",
    "- Generating random numbers and making random choices using the `random` module.\n",
    "- Interacting with the file system using the `os` module."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'new.py'"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import shutil\n",
    "\n",
    "shutil.copy(\"../.gitignore\", \"new.py\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Serialisation\n",
    "\n",
    "Data serialization is the process of converting data structures or objects into a format that can be easily stored and retrieved. In Python, common serialization formats include JSON, CSV, and pickle.\n",
    "\n",
    "Here is an example of how to serialize and deserialize an array using the `pickle` module:\n",
    "\n",
    "```python\n",
    "import pickle\n",
    "\n",
    "# Serialize the array\n",
    "with open('array.pkl', 'wb') as f:\n",
    "    pickle.dump(arr, f)\n",
    "\n",
    "# Deserialize the array\n",
    "with open('array.pkl', 'rb') as f:\n",
    "    arr_loaded = pickle.load(f)\n",
    "\n",
    "print(arr_loaded)\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "String =  {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}\n",
      "<class 'dict'>\n",
      "John\n"
     ]
    }
   ],
   "source": [
    "import json\n",
    "\n",
    "data = {\n",
    "    \"name\": \"John\",\n",
    "    \"age\": 30,\n",
    "    \"city\": \"New York\"\n",
    "}\n",
    "\n",
    "json_string = json.dumps(data)\n",
    "\n",
    "print(\"String = \",json_string)\n",
    "\n",
    "\n",
    "\n",
    "data2 = json.loads(json_string)\n",
    "\n",
    "\n",
    "\n",
    "print(type(data))\n",
    "print(data2.get(\"name\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# CSV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {
    "vscode": {
     "languageId": "html"
    }
   },
   "outputs": [],
   "source": [
    "# some random tests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'array.ipynb.json'"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "shutil.copy(\"array.ipynb\", \"array.ipynb.json\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
